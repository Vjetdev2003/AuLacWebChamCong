@page "/quanLyChamCong"
@using AuLacChamCong.Models.Shared
@using AuLacChamCong.Models.Shared.ModelSearch
@using AuLacChamCong.Models.ViewModel
@using AuLacChamCong.Services.TinhCong
@using AuLacChamCong.Models
@inject ITinhCongService _tinhCongService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Quản Lý Chấm Công</PageTitle>

<!-- Error Message -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<!-- Filters -->
<div class="row mb-3">
    <div class="col-auto d-flex align-items-center">
        <label for="dept" class="me-2">Chọn Khoa:</label>
        <InputSelect @bind-Value="SelectedDeptId" id="dept" class="form-select w-auto me-3">
            <option value="">Chọn Khoa</option>
            @foreach (var dept in departments)
            {
                <option value="@dept.DeptPrkID">@dept.DeptName</option>
            }
        </InputSelect>
    </div>

    <div class="col-auto d-flex align-items-center">
        <label for="employee" class="me-2">Chọn Nhân Viên:</label>
        <InputSelect @bind-Value="SelectedEmployeeId" id="employee" class="form-select w-auto me-3">
            <option value="">Chọn Nhân Viên</option>
            @foreach (var employee in employees)
            {
                <option value="@employee.PsnPrkID">@employee.PsnName</option>
            }
        </InputSelect>
    </div>

    <div class="col-auto d-flex align-items-center">
        <label for="monthYear" class="me-2">Tháng/Năm:</label>
        <InputDate @bind-Value="SelectedDate" id="monthYear" class="form-control w-auto me-3" Type="InputDateType.Month" />
    </div>

    <div class="col-auto d-flex align-items-center">
        <label for="searchTerm" class="me-2">Tìm kiếm nhân viên:</label>
        <InputText @bind-Value="searchTerm" id="searchTerm" class="form-control w-auto me-3" placeholder="Nhập tên nhân viên..." />
    </div>

    <div class="col-auto d-flex align-items-center">
        <button class="btn btn-primary me-2" @onclick="SearchEmployees">Tìm kiếm</button>
        <button class="btn btn-secondary" @onclick="ExportReport" disabled="@isExporting">Xuất báo cáo</button>
    </div>
</div>

<!-- Loading Indicator -->
@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (pagedEmployeeSummary != null && pagedEmployeeSummary.Any())
{
    <div class="attendance-report">
        <h4 class="text-center">Báo cáo ngày công</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Khoa</th>
                    <th>Họ và tên</th>
                    @for (int day = 1; day <= daysInMonth; day++)
                    {
                        <th style="background-color: #87CEEB;">@day</th>
                    }
                </tr>
                <tr>
                    <th></th>
                    <th></th>
                    @for (int day = 1; day <= daysInMonth; day++)
                    {
                        var date = new DateTime(SelectedDate.Year, SelectedDate.Month, day);
                        <th>@GetDayOfWeekAbbreviation(date)</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in pagedEmployeeSummary)
                {
                    <tr>
                        <td>@item.DeptName</td>
                        <td>@item.EmployeeName</td>
                        @for (int day = 0; day < daysInMonth; day++)
                        {
                            <td>
                                @(day < item.DailyRecords.Count ? (item.DailyRecords[day] == "N" || item.DailyRecords[day] == "L" ? "0" : item.DailyRecords[day]) : "0")
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <label for="pageSize" class="me-2">Số mục:</label>
                <InputSelect @bind-Value="pageSize" id="pageSize" class="form-control w-auto d-inline-block" @onchange="ChangePageSize">
                    <option value="10">10</option>
                    <option value="20">20</option>
                    <option value="50">50</option>
                </InputSelect>
            </div>
            <div>
                <button class="btn btn-outline-primary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">Trước</button>
                <span>Trang @currentPage / @totalPages</span>
                <button class="btn btn-outline-primary ms-2" @onclick="NextPage" disabled="@(currentPage == totalPages)">Sau</button>
            </div>
        </div>
    </div>
}
else
{
    <p>Không có dữ liệu....</p>
}

@code {
    private bool isLoading = false;
    private bool isExporting = false;
    private string errorMessage = string.Empty;
    private int? _selectedDeptId;
    private int? _selectedEmployeeId;
    private DateTime _selectedDate = DateTime.Now;
    private string searchTerm = string.Empty;
    private List<DeptsDb> departments = new List<DeptsDb>();
    private List<PersonnelsDb> employees = new List<PersonnelsDb>();
    private List<BaoCaoChamCong> employeeSummary = new List<BaoCaoChamCong>();
    private List<BaoCaoChamCong> filteredEmployeeSummary = new List<BaoCaoChamCong>();
    private List<BaoCaoChamCong> pagedEmployeeSummary = new List<BaoCaoChamCong>();
    private int daysInMonth;
    private int pageSize = 10;
    private int currentPage = 1;
    private int totalPages;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Inject the saveAsFile script into the DOM
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.saveAsFile = (filename, base64String) => {
                    try {
                        const byteCharacters = atob(base64String);
                        const byteNumbers = new Array(byteCharacters.length);
                        for (let i = 0; i < byteCharacters.length; i++) {
                            byteNumbers[i] = byteCharacters.charCodeAt(i);
                        }
                        const byteArray = new Uint8Array(byteNumbers);
                        const blob = new Blob([byteArray], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                        const url = window.URL.createObjectURL(blob);
                        const link = document.createElement('a');
                        link.setAttribute('href', url);
                        link.setAttribute('download', filename);
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        window.URL.revokeObjectURL(url);
                        console.log('Excel download initiated:', filename);
                    } catch (error) {
                        console.error('Error in saveAsFile:', error);
                        throw error;
                    }
                };
            ");
            Console.WriteLine("[INFO] OnAfterRenderAsync: saveAsFile script injected.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("[INFO] OnInitializedAsync: Bắt đầu tải dữ liệu...");
        departments = await _tinhCongService.GetDepartmentsAsync();
        employees = await _tinhCongService.GetEmployeesAsync();
        daysInMonth = DateTime.DaysInMonth(_selectedDate.Year, _selectedDate.Month);
        Console.WriteLine($"[INFO] OnInitializedAsync: Đã tải {departments.Count} khoa và {employees.Count} nhân viên.");
        await FetchReport();
    }

    public int? SelectedDeptId
    {
        get => _selectedDeptId;
        set
        {
            _selectedDeptId = value;
            Console.WriteLine($"[INFO] SelectedDeptId: Đã chọn khoa ID: {_selectedDeptId}");
            FetchReport();
        }
    }

    public int? SelectedEmployeeId
    {
        get => _selectedEmployeeId;
        set
        {
            _selectedEmployeeId = value;
            Console.WriteLine($"[INFO] SelectedEmployeeId: Đã chọn nhân viên ID: {_selectedEmployeeId}");
            FetchReport();
        }
    }

    public DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            _selectedDate = value;
            Console.WriteLine($"[INFO] SelectedDate: Đã chọn ngày: {_selectedDate}");
            FetchReport();
        }
    }

    private async Task FetchReport()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        int month = _selectedDate.Month;
        int year = _selectedDate.Year;
        daysInMonth = DateTime.DaysInMonth(year, month);
        Console.WriteLine($"[INFO] FetchReport: Số ngày trong tháng {month}/{year}: {daysInMonth}");
        Console.WriteLine($"[INFO] FetchReport: Gọi GetMonthlyAttendanceAsync với deptId: {_selectedDeptId}, employeeId: {_selectedEmployeeId}");

        employeeSummary = await _tinhCongService.GetMonthlyAttendanceAsync(month, year, _selectedDeptId, _selectedEmployeeId);

        Console.WriteLine($"[INFO] FetchReport: Đã nhận được {employeeSummary.Count} bản ghi từ GetMonthlyAttendanceAsync.");

        // Add department names to each record
        foreach (var record in employeeSummary)
        {
            var employee = employees.FirstOrDefault(e => e.PsnPrkID == record.UserWritePrkID);
            if (employee != null && !string.IsNullOrEmpty(employee.DeptPrkID))
            {
                var deptIds = employee.DeptPrkID.Split(',').Select(id => int.Parse(id)).ToList();
                var deptNames = departments
                    .Where(d => deptIds.Contains(d.DeptPrkID))
                    .Select(d => d.DeptName)
                    .ToList();
                record.DeptName = string.Join(", ", deptNames);
            }
            else
            {
                record.DeptName = "Unknown";
            }
        }

        filteredEmployeeSummary = employeeSummary.ToList();
        Console.WriteLine($"[INFO] FetchReport: filteredEmployeeSummary có {filteredEmployeeSummary.Count} bản ghi.");
        UpdatePagedData();

        isLoading = false;
        StateHasChanged();
    }

    private void SearchEmployees()
    {
        Console.WriteLine($"[INFO] SearchEmployees: Tìm kiếm với từ khóa: {searchTerm}");
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployeeSummary = employeeSummary.ToList();
        }
        else
        {
            filteredEmployeeSummary = employeeSummary
                .Where(e => e.EmployeeName.ToLower().Contains(searchTerm.ToLower()))
                .ToList();
        }

        Console.WriteLine($"[INFO] SearchEmployees: filteredEmployeeSummary sau tìm kiếm có {filteredEmployeeSummary.Count} bản ghi.");
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        totalPages = (int)Math.Ceiling((double)filteredEmployeeSummary.Count / pageSize);
        currentPage = Math.Min(currentPage, totalPages);
        currentPage = Math.Max(currentPage, 1);

        pagedEmployeeSummary = filteredEmployeeSummary
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        Console.WriteLine($"[INFO] UpdatePagedData: pagedEmployeeSummary có {pagedEmployeeSummary.Count} bản ghi, tổng số trang: {totalPages}, trang hiện tại: {currentPage}.");
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        currentPage = 1;
        UpdatePagedData();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedData();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedData();
        }
    }

    private string GetDayOfWeekAbbreviation(DateTime date)
    {
        switch (date.DayOfWeek)
        {
            case DayOfWeek.Monday: return "Th2";
            case DayOfWeek.Tuesday: return "Th3";
            case DayOfWeek.Wednesday: return "Th4";
            case DayOfWeek.Thursday: return "Th5";
            case DayOfWeek.Friday: return "Th6";
            case DayOfWeek.Saturday: return "Th7";
            case DayOfWeek.Sunday: return "CN";
            default: return "";
        }
    }

    private async Task ExportReport()
    {
        try
        {
            isExporting = true;
            errorMessage = string.Empty;
            StateHasChanged();

            if (filteredEmployeeSummary == null || !filteredEmployeeSummary.Any())
            {
                errorMessage = "Không có dữ liệu để xuất báo cáo.";
                Console.WriteLine("[ERROR] ExportReport: filteredEmployeeSummary is null or empty. Cannot export report.");
                return;
            }

            // Generate Excel file
            var excel = await _tinhCongService.getBaoCaoNgayCongExcel(filteredEmployeeSummary, daysInMonth, _selectedDate);

            // Convert to Base64 string
            string asBase64String = Convert.ToBase64String(excel.GetAsByteArray());
            Console.WriteLine("[INFO] ExportReport: Excel file generated and converted to Base64.");

            // Call JavaScript to download the Excel file
            await JSRuntime.InvokeVoidAsync("saveAsFile", $"BaoCaoNgayCong_{_selectedDate:MM-yyyy}.xlsx", asBase64String);
            Console.WriteLine("[INFO] ExportReport: Excel download initiated.");
        }
        catch (Exception ex)
        {
            errorMessage = "Lỗi khi xuất báo cáo: " + ex.Message;
            Console.WriteLine($"[ERROR] ExportReport: Failed to export report. Exception: {ex.Message}\nStackTrace: {ex.StackTrace}");
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        // Optionally, clean up the script if needed
    }
}