@page "/quanLyNhanVien"

<PageTitle>Quản Lý Nhân Viên</PageTitle>
@using AuLacChamCong.Models.Shared
@using AuLacChamCong.Services.Modules.NhanVien
@using AuLacChamCong.Services.TinhCong
@using AuLacChamCong.Services.Modules.DonCongTac.Model
@using AuLacChamCong.Services.Modules.DonCongTac.Service
@inject NavigationManager Navigation
@inject ITinhCongService _tinhCongServices
@inject IDonCongTacServices _donCongTacServices
@inject INhanVien _nhanVien
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3 class="text-xl font-semibold text-center mb-4">Quản Lý Danh Sách Nhân Viên</h3>

<!-- Filter Section -->
<div class="row mb-3 align-items-end">
    <div class="col-md-2 col-sm-6">
        <label class="mb-1">Nhân Viên:</label>
        <select class="form-select" @bind="selectedEmployeeId" @bind:after="FilterByEmployee">
            <option value="0">Chọn Nhân Viên</option>
            @foreach (var employee in employees)
            {
                <option value="@employee.PsnPrkID">@employee.PsnName</option>
            }
        </select>
    </div>

    <div class="col-md-4 col-sm-6">
        <label class="mb-1">Tìm kiếm:</label>
        <div class="input-group">
            <input type="text" class="form-control search-input" placeholder="Tìm kiếm theo tên nhân viên hoặc địa chỉ" @bind="searchTerm" @bind:event="oninput" />
            <button class="btn btn-info search-btn" @onclick="SearchEmployees">
                Tìm kiếm
            </button>
        </div>
    </div>

    <div class="col-md-2 col-sm-12 d-flex justify-content-end">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#employeeModal" @onclick="OpenAddEmployeeModal">
            <i class="fa fa-plus" aria-hidden="true"></i> Thêm mới
        </button>
    </div>
</div>

<!-- Employee List Section -->
@if (isLoading)
{
    <div class="text-center">Đang tải dữ liệu...</div>
}
else if (filteredEmployees == null)
{
    <div class="text-center">Đang tải dữ liệu...</div>
}
else if (!filteredEmployees.Any())
{
    <div class="text-center">Không có nhân viên nào.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Họ Tên</th>
                    <th>Số Điện Thoại</th>
                    <th>Địa chỉ</th>
                    <th>Email</th>
                    <th>Chức Vụ</th>
                    <th>Hành Động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var employee in paginatedEmployees)
                {
                    <tr>
                        <td>@employee.PsnName</td>
                        <td>@employee.PsnPhone</td>
                        <td>@employee.PsnAddr</td>
                        <td>@employee.PsnEmail</td>
                        <td>@employee.Chucvu</td>
                        <td>
                            <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#employeeModal" @onclick="() => OpenEditEmployeeModal(employee.PsnPrkID)">Chỉnh sửa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Simplified Pagination Controls -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <label for="pageSize" class="me-2">Số mục:</label>
            <InputSelect @bind-Value="pageSize" id="pageSize" class="form-control w-auto d-inline-block" @onchange="ChangePageSize">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </InputSelect>
        </div>
        <div>
            <button class="btn btn-outline-primary me-2" @onclick="PreviousPage" disabled="@(currentPage == 1)">Trước</button>
            <span>Trang @currentPage / @totalPages</span>
            <button class="btn btn-outline-primary ms-2" @onclick="NextPage" disabled="@(currentPage == totalPages)">Sau</button>
        </div>
    </div>
}

<!-- Bootstrap Modal for Adding/Editing Employee -->
<div class="modal fade" id="employeeModal" tabindex="-1" aria-labelledby="employeeModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="employeeModalLabel">@(newEmployee.PsnPrkID > 0 ? "Chỉnh Sửa Nhân Viên" : "Thêm Nhân Viên")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Họ Tên:</label>
                    <input type="text" class="form-control" @bind="newEmployee.PsnName" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Số Điện Thoại:</label>
                    <input type="text" class="form-control" @bind="newEmployee.PsnPhone" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Địa chỉ:</label>
                    <input type="text" class="form-control" @bind="newEmployee.PsnAddr" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Email:</label>
                    <input type="email" class="form-control" @bind="newEmployee.PsnEmail" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Chức Vụ:</label>
                    <input type="text" class="form-control" @bind="newEmployee.Chucvu" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" @onclick="SaveEmployee">Lưu</button>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for Viewing History -->
<div class="modal fade" id="historyModal" tabindex="-1" aria-labelledby="historyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="historyModalLabel">Lịch Sử Chấm Công</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (isLoadingHistory)
                {
                    <div class="text-center">Đang tải lịch sử...</div>
                }
                else if (filteredHistory == null || !filteredHistory.Any())
                {
                    <div class="alert alert-info">Không có lịch sử chấm công nào.</div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID Đơn</th>
                                    <th>Tên Nhân Viên</th>
                                    <th>Ngày Công Tác</th>
                                    <th>Nơi Công Tác</th>
                                    <th>Lý Do</th>
                                    <th>Trạng Thái</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var don in filteredHistory)
                                {
                                    <tr>
                                        <td>@don.MngDonCongTacPrkID</td>
                                        <td>@(don.Personnels?.PsnName ?? employees.FirstOrDefault(p => p.PsnPrkID == don.PsnPrkID)?.PsnName ?? "N/A")</td>
                                        <td>@don.NgayCongTac.ToString("dd/MM/yyyy")</td>
                                        <td>@don.NoiCongTac</td>
                                        <td>@don.LyDo</td>
                                        <td>
                                            @if (don.Status == 1)
                                            {
                                                <span class="badge bg-success">Đã xác nhận</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">Đã từ chối</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<PersonnelsDb> employees;
    private List<PersonnelsDb> filteredEmployees;
    private List<PersonnelsDb> paginatedEmployees;
    private string searchTerm = string.Empty;
    private int selectedEmployeeId = 0; // For filtering by employee
    private int currentPage = 1;
    private int pageSize = 10; // Default number of employees per page
    private int totalPages;
    private bool isLoading = false;

    // Properties for History
    private List<DonCongTacDb> historyItems;
    private List<DonCongTacDb> filteredHistory;
    private bool isLoadingHistory = false;

    // Properties for Add/Edit Employee Modal
    private PersonnelsDb newEmployee = new PersonnelsDb();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            isLoadingHistory = true;

            // Load employees
            employees = _tinhCongServices.getsNhanVien().ToList();
            Console.WriteLine($"Loaded {employees.Count} employees");

            // Load history data
            historyItems = await _donCongTacServices.GetHistoryDonCongTac();
            Console.WriteLine($"Loaded {historyItems.Count} history items");

            FilterAndPaginateEmployees();
            FilterHistory();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            isLoadingHistory = false;
            StateHasChanged();
        }
    }

    private void FilterAndPaginateEmployees()
    {
        // Start with the full list
        var tempFiltered = employees;

        // Filter by selected employee if an employee is selected
        if (selectedEmployeeId != 0)
        {
            tempFiltered = tempFiltered
                .Where(e => e.PsnPrkID == selectedEmployeeId)
                .ToList();
        }

        // Further filter by search term if provided
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            tempFiltered = tempFiltered
                .Where(e => (e.PsnName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (e.PsnAddr?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }

        filteredEmployees = tempFiltered;

        // Calculate total pages
        totalPages = (int)Math.Ceiling((double)filteredEmployees.Count / pageSize);

        // Ensure current page is within bounds
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages > 0 ? totalPages : 1;

        // Paginate the filtered employees
        paginatedEmployees = filteredEmployees
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        StateHasChanged();
    }

    private void FilterHistory()
    {
        // Start with the full history list
        var tempFiltered = historyItems;

        // Filter by selected employee if an employee is selected
        if (selectedEmployeeId != 0)
        {
            tempFiltered = tempFiltered
                .Where(h => h.PsnPrkID == selectedEmployeeId)
                .ToList();
        }

        // Further filter by search term if provided
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            tempFiltered = tempFiltered
                .Where(h => (h.Personnels?.PsnName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (employees.FirstOrDefault(p => p.PsnPrkID == h.PsnPrkID)?.PsnName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                            (h.NoiCongTac?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
                .ToList();
        }

        filteredHistory = tempFiltered;
        StateHasChanged();
    }

    private void FilterByEmployee()
    {
        currentPage = 1; // Reset to first page when employee changes
        FilterAndPaginateEmployees();
        FilterHistory();
    }

    private void SearchEmployees()
    {
        currentPage = 1; // Reset to first page on search
        FilterAndPaginateEmployees();
        FilterHistory();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            FilterAndPaginateEmployees();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            FilterAndPaginateEmployees();
        }
    }

    private void ChangePageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page when page size changes
            FilterAndPaginateEmployees();
        }
    }

    private void OpenAddEmployeeModal()
    {
        newEmployee = new PersonnelsDb { PsnPrkID = 0 }; // ID = 0 for new employee
        Console.WriteLine("Opening modal to add new employee...");
    }

    private void OpenEditEmployeeModal(int psnPrkID)
    {
        var employeeToEdit = employees.FirstOrDefault(e => e.PsnPrkID == psnPrkID);
        if (employeeToEdit != null)
        {
            newEmployee = new PersonnelsDb
                {
                    PsnPrkID = employeeToEdit.PsnPrkID, // Keep the existing ID
                    PsnName = employeeToEdit.PsnName,
                    PsnPhone = employeeToEdit.PsnPhone,
                    PsnAddr = employeeToEdit.PsnAddr,
                    PsnEmail = employeeToEdit.PsnEmail,
                    Chucvu = employeeToEdit.Chucvu
                };
            Console.WriteLine($"Opening modal to edit employee with ID {psnPrkID}...");
        }
    }

    private async Task SaveEmployee()
    {
        // Validate inputs
        if (string.IsNullOrWhiteSpace(newEmployee.PsnName) ||
            string.IsNullOrWhiteSpace(newEmployee.PsnPhone) ||
            string.IsNullOrWhiteSpace(newEmployee.PsnAddr) ||
            string.IsNullOrWhiteSpace(newEmployee.PsnEmail) ||
            string.IsNullOrWhiteSpace(newEmployee.Chucvu))
        {
            Console.WriteLine("[ERROR] Vui lòng điền đầy đủ thông tin!");
            return;
        }

        if (newEmployee.PsnPrkID > 0)
        {
            // Update existing employee
            var employeeToUpdate = employees.FirstOrDefault(e => e.PsnPrkID == newEmployee.PsnPrkID);
            if (employeeToUpdate != null)
            {
                Console.WriteLine($"[DEBUG] Found employee to update: ID {newEmployee.PsnPrkID}, Old Name: {employeeToUpdate.PsnName}");

                // Update the fields
                employeeToUpdate.PsnName = newEmployee.PsnName;
                employeeToUpdate.PsnPhone = newEmployee.PsnPhone;
                employeeToUpdate.PsnAddr = newEmployee.PsnAddr;
                employeeToUpdate.PsnEmail = newEmployee.PsnEmail;
                employeeToUpdate.Chucvu = newEmployee.Chucvu;

                _nhanVien.UpdateNhanVien(employeeToUpdate);
                Console.WriteLine($"[INFO] Updated employee with ID {newEmployee.PsnPrkID}, New Name: {employeeToUpdate.PsnName}");
            }
            else
            {
                Console.WriteLine($"[ERROR] Employee with ID {newEmployee.PsnPrkID} not found!");
            }
        }
        else
        {
            // Add new employee
            newEmployee.PsnPrkID = employees.Any() ? employees.Max(e => e.PsnPrkID) + 1 : 1; // Simulate auto-increment ID
            _nhanVien.CreateNhanVien(newEmployee);   
            Console.WriteLine($"[INFO] Added new employee with ID {newEmployee.PsnPrkID}, Name: {newEmployee.PsnName}");
        }

        // Reset the form
        newEmployee = new PersonnelsDb();

        // Close the modal
        await JSRuntime.InvokeVoidAsync("bootstrap.Modal.getInstance", "#employeeModal", "hide");

        // Reload the current page
        Navigation.NavigateTo("/quanLyNhanVien", true);
    }

    private void ViewHistory()
    {
        // Ensure the history is filtered before showing the modal
        FilterHistory();
        StateHasChanged();
    }
}