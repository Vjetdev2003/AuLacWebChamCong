@page "/home"
@using AuLacChamCong.Models.Shared
@using AuLacChamCong.Services.TinhCong
@inject ITinhCongService _tinhCongService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Thống Kê Chấm Công</PageTitle>

<h3>Thống Kê Chấm Công</h3>

<!-- Filters -->
<div class="row mb-3">
    <div class="col-auto d-flex align-items-center">
        <label for="dept" class="me-2">Chọn Khoa:</label>
        <InputSelect @bind-Value="SelectedDeptId" id="dept" class="form-select w-auto me-3">
            <option value="">Tất cả khoa</option>
            @foreach (var dept in departments)
            {
                <option value="@dept.DeptPrkID">@dept.DeptName</option>
            }
        </InputSelect>
    </div>

    <div class="col-auto d-flex align-items-center">
        <label for="employee" class="me-2">Chọn Nhân Viên:</label>
        <InputSelect @bind-Value="SelectedEmployeeId" id="employee" class="form-select w-auto me-3">
            <option value="">Tất cả nhân viên</option>
            @foreach (var employee in employees)
            {
                <option value="@employee.PsnPrkID">@employee.PsnName</option>
            }
        </InputSelect>
    </div>

    <div class="col-auto d-flex align-items-center">
        <label for="monthYear" class="me-2">Tháng/Năm:</label>
        <InputDate @bind-Value="SelectedDate" id="monthYear" class="form-control w-auto me-3" Type="InputDateType.Month" />
    </div>

    <div class="mt-3 col-auto">
        <button class="btn btn-primary" @onclick="LoadChartData">Tải thống kê</button>
    </div>
</div>

<!-- Error Message -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

<!-- Charts -->
@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <h5>Biểu đồ cột</h5>
            <canvas id="barChart" width="400" height="400"></canvas>
        </div>
        <div class="col-md-4">
            <h5>Biểu đồ tròn</h5>
            <canvas id="pieChart" width="400" height="400"></canvas>
        </div>
        <div class="col-md-4">
            <h5>Biểu đồ đường</h5>
            <canvas id="lineChart" width="400" height="400"></canvas>
        </div>
    </div>
}

@code {
    private DateTime _selectedDate = DateTime.Now;
    private int? _selectedDeptId;
    private int? _selectedEmployeeId;
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private object barChartData;
    private object pieChartData;
    private object lineChartData;
    private int daysInMonth;
    private List<DeptsDb> departments = new();
    private List<PersonnelsDb> employees = new();

    protected override async Task OnInitializedAsync()
    {
        departments = await _tinhCongService.GetDepartmentsAsync();
        employees = await _tinhCongService.GetEmployeesAsync();
        await LoadChartData();
    }

    public int? SelectedDeptId
    {
        get => _selectedDeptId;
        set
        {
            _selectedDeptId = value;
            _selectedEmployeeId = null; // Reset employee khi chọn khoa
            Console.WriteLine($"[INFO] SelectedDeptId: Đã chọn khoa {_selectedDeptId}");
            LoadChartData();
        }
    }

    public int? SelectedEmployeeId
    {
        get => _selectedEmployeeId;
        set
        {
            _selectedEmployeeId = value;
            _selectedDeptId = null; // Reset dept khi chọn nhân viên
            Console.WriteLine($"[INFO] SelectedEmployeeId: Đã chọn nhân viên {_selectedEmployeeId}");
            LoadChartData();
        }
    }

    public DateTime SelectedDate
    {
        get => _selectedDate;
        set
        {
            _selectedDate = value;
            Console.WriteLine($"[INFO] SelectedDate: Đã chọn {_selectedDate}");
            LoadChartData();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isLoading)
        {
            if (barChartData != null)
                await JSRuntime.InvokeVoidAsync("renderCharts.bar", "barChart", barChartData);
            if (pieChartData != null)
                await JSRuntime.InvokeVoidAsync("renderCharts.pie", "pieChart", pieChartData);
            if (lineChartData != null)
                await JSRuntime.InvokeVoidAsync("renderCharts.line", "lineChart", lineChartData);
        }
    }

    private async Task LoadChartData()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var attendanceData = await _tinhCongService.GetMonthlyAttendanceAsync(
                _selectedDate.Month,
                _selectedDate.Year,
                _selectedDeptId,
                _selectedEmployeeId
            );

            if (attendanceData == null || !attendanceData.Any())
            {
                errorMessage = "Không có dữ liệu để hiển thị.";
                barChartData = pieChartData = lineChartData = null;
            }
            else
            {
                daysInMonth = DateTime.DaysInMonth(_selectedDate.Year, _selectedDate.Month);

                // Tổng hợp dữ liệu
                int totalWorkingDays = attendanceData.Sum(x => x.TotalWorkingDays);
                int totalLeaveDays = attendanceData.Sum(x => x.TotalLeaveDays);
                int totalHolidays = attendanceData.Sum(x => x.TotalHolidays);

                // Biểu đồ cột
                barChartData = new
                {
                    labels = new[] { "Ngày công", "Ngày nghỉ", "Ngày lễ" },
                    datasets = new[]
                    {
                        new
                        {
                            label = "Số ngày",
                            data = new[] { totalWorkingDays, totalLeaveDays, totalHolidays },
                            backgroundColor = new[] { "#36A2EB", "#FF6384", "#FFCE56" }
                        }
                    }
                };

                // Biểu đồ tròn
                pieChartData = new
                {
                    labels = new[] { "Ngày công", "Ngày nghỉ", "Ngày lễ" },
                    datasets = new[]
                    {
                        new
                        {
                            data = new[] { totalWorkingDays, totalLeaveDays, totalHolidays },
                            backgroundColor = new[] { "#36A2EB", "#FF6384", "#FFCE56" }
                        }
                    }
                };

                // Biểu đồ đường
                var dailyWorkingDays = new int[daysInMonth];
                foreach (var record in attendanceData)
                {
                    for (int day = 0; day < record.DailyRecords.Count; day++)
                    {
                        if (record.DailyRecords[day] == "X" || record.DailyRecords[day] == "Muộn")
                        {
                            dailyWorkingDays[day]++;
                        }
                    }
                }

                lineChartData = new
                {
                    labels = Enumerable.Range(1, daysInMonth).Select(d => d.ToString()).ToArray(),
                    datasets = new[]
                    {
                        new
                        {
                            label = "Ngày công",
                            data = dailyWorkingDays,
                            borderColor = "#36A2EB",
                            fill = false
                        }
                    }
                };
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            barChartData = pieChartData = lineChartData = null;
            Console.WriteLine($"[ERROR] LoadChartData: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}